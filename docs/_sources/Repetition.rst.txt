Повторение
===========

Вече споменахме, че повтарянето на една или повече команди (блокове) е важна концепция в програмирането. Когато някои от командите действат няколко пъти в програма, казваме, че програмата съдържа цикъл. Използвали сме тази концепция вече няколко пъти.

.. |Repeat10| image:: ../_images/ponavljanje/Repeat10.png
.. |RepeatF| image:: ../_images/ponavljanje/RepeatF.png
.. |RepeatU| image:: ../_images/ponavljanje/RepeatU.png

В Скрач имаме 3 вида блокове, които повтарят команди:

•   	Блокът, който повтаря команди конкретен брой пъти;
•	   Блокът, който повтаря команди безкраен брой пъти;
•  	Блокът, който повтаря команди докато специфично състояние не се изпълни.

Ще вкараме блоковете, които трябва да повторим, в един от тези блокове.

Блокът, който повтаря команди конкретен брой пъти
-----------------------------------------------------------

.. |Uradi| image:: ../_images/Uradi.png
.. |Repeat10a| image:: ../_images/ponavljanje/Repeat10a.png
.. |Repeat5| image:: ../_images/ponavljanje/Repeat5.png

.. image:: ../_images/ponavljanje/Repeat10.png
   :align: center

Използвахме блока, който повтаря команди конкретен брой пъти, в проекта *Ферма* (можеш да намериш повече информация в урока *Външен вид)*.

Спрайтът пиле в програмата симулираше движението кълване чрез сменянето на костюми а, б и в 10 пъти. След тази симулация пилето увеличи размера си с 10. Нашата цел беше да увеличим размера на спрайта пиле с 50, така че повторихме част от кода, който увеличи размера на спрайта 5 пъти. За да постигнем желаното поведение, използвахме блоковете |Repeat10a| и |Repeat5|.

Във фигурата отдолу свихме частта от текста, свързан с повторението на командите, и направихме същата програма, но този път без да използваме блоковете за повторение. Текстът, който имахме, беше наистина дълъг, така че за яснота трябваше да го разделим на 5 колони. 

.. image:: ../_images/ponavljanje/PileBezRepeat.png
   :width: 1200px   
   :align: center

|Uradi| Създай проекта *Ферма* без да използваш блоковете за повторение. Сравни твоя код с нашия. Вярваме, че можеш да видиш, че натрупването на идентични групи от блокове прави програмата по-дълга, по-трудна за разбиране и подобряване. 

Блокът, който повтаря команди безкраен брой пъти
-------------------------------------------------

.. |StopAll| image:: ../_images/ponavljanje/StopAll.png
.. |StopTS| image:: ../_images/ponavljanje/StopTS.png
.. |StopOS| image:: ../_images/ponavljanje/StopOS.png

.. image:: ../_images/ponavljanje/RepeatF.png
   :align: center

Този блок за повтаряне на команди действа безкраен брой пъти. Действието на този блок никога не спира от само себе си. Трябва да го спрем чрез кликване на бутон, който спира програмата (червеният бутон до зеления флаг), или чрез използването на един от следните блокове |StopAll| / |StopTS| / |StopOS|, от категория **Control**.

Използвахме блока, който повтаря команди безкраен брой пъти, в проекта *Котката гони мишката* (можеш да намериш повече информация в урока *Движение*.

.. mchoice:: PonavljanjeZ1
   :answer_a: Новите блокове могат да бъдат вмъкнати в самия блок, така че няма нужда да продължавате скрипта.
   :answer_b: Това е грешка в Scratch. Блокът за безкрайно повторение трябва да има опция за продължаване на скрипта. 
   :answer_c: Добавянето на блоковете е безсмислено, защото те никога не биха се изпълнявали. 
   :feedback_a: Опцията за вмъкване на нови блокове в блока |RepeatF| не предоставя възможност за подреждане на скриптове, които никога няма да бъдат повторени, просто добавя команди, които ще се повтарят безкрайно много пъти.     
   :feedback_b: Колко вероятно е един от най-често използваните блокове в Scratch да не е конструиран правилно? Предлагаме ви да помислите отново върху въпроса и да дадете нов отговор. 
   :feedback_c: Браво, добра работа!  
   :correct: c

   Анализирай външния вид на блоковете за повтаряне на команди. Можеш да видиш, че блокът, който повтаря команди безкраен брой пъти, няма опцията да се свързва с други блокове, тоест не можеш да добавиш други блокове към него. Защо?
   

Блокът, който повтаря команди, докато специфично състояние не се изпълни
-------------------------------------------------------------------------

.. |VSec| image:: ../_images/ponavljanje/Vsec.png

.. image:: ../_images/ponavljanje/RepeatU.png
   :align: center

Този блок за повторение на команди действа, докато определено състояние не е изпълнено.  Текстовете в този блок се изпълняват на основата на тест, който определя дали състоянието, поставено в блока е вярно или не. Използваме този блок, когато не знаем колко пъти трябва да повторим команди в блока за повторение и, следователно, искаме те да действат, докато дадено състояние не е изпълнено. 

.. mchoice:: PonavljanjeZ2
   :answer_a: Блокът, който повтаря команди, определен брой пъти.
   :answer_b: Блокът, който повтаря команди безкрайно много пъти.
   :answer_c: Блокът, който повтаря команди, докато не бъде изпълнено конкретно условие.  
   :feedback_a: Ако изберете този блок, изстрелването на ракети няма нищо общо с енергийното ниво на вашия спрайт, нали?  
   :feedback_b: Ако изберете този блок, изстрелването на ракети няма нищо общо с енергийното ниво на вашия спрайт, нали?
   :feedback_c: Браво! Броят на повторенията зависи от изпълнението на условията. В момента, в който енергийното ниво на вашия спрайт падне под определена стойност, изстрелването на ракети ще спре.   
   :correct: c

   Искаш да създадеш програма, където спрайтът (оръдие с град) изстрелва ракети по носещи градушката облаци, докато неговото ниво на енергия спадне под определена стойност. Кой блок за повтарящи се команди ще използваш?

Ще демонстрираме как блок, който повтаря команди, докато определено състояние не е изпълнено работи – ще създадем програма, която функционира като таймер, тоест, отброява секундите от въведената стойност до нула.

За тази програма ще създадем променливата |VSec|, която ще съхранява стойността на оставащите секунди, докато таймерът отброява. Ще поискаме от потребителя да въведе определен брой секунди. Тогава ще започнем отброяването. След като въведеното време измине, ще чуем звуков сигнал. 

Фигурата отдолу съдържа нашето предложение за кода на програмата с коментари, които служат за обяснение. Програмистите смятат за полезно оставянето на коментари по текстовете, с които обясняват какво правят дадени блокове. Коментирането прави по-лесно други програмисти да разберат и да подобрят програмите, които създаваме. Можем да добавим коментар чрез кликване с десния бутон на текста и чрез избиране на опцията **Добави коментар**.

.. image:: ../_images/ponavljanje/Tajmer.png
      :align: center

|Uradi| Програмата *Таймер* може да бъде намерена на линка |https://scratch.mit.edu/projects/326420353|. Подобри я, като добавиш звук на тиктакане на часовник, който ще се чува, докато таймерът отброява.

.. |https://scratch.mit.edu/projects/326420353| raw:: html

 <a href="https://scratch.mit.edu/projects/326420353" target="_blank">https://scratch.mit.edu/projects/326420353</a>